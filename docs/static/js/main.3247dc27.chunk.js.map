{"version":3,"sources":["components/AddCategoty.jsx","helpers/getGifs.jsx","hooks/useFetchGifts.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","components/GifExpertApp.jsx","index.tsx"],"names":["AddCategoty","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","gifGrid","category","a","URL","encodeURI","fetch","resp","json","data","gifs","map","imgs","id","title","url","images","downsized_medium","useFetchGifts","loading","state","setstate","useEffect","img","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"uLAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAsBzC,OACE,sBAAMC,SAjBO,SAACC,GACdA,EAAEC,iBACiB,KAAfJ,GAIAA,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAGb,MAAM,CAAEP,GAAR,mBAAuBO,OAEzBN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAtBtB,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,a,uBCLdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,yDAC0CC,UAAUH,GADpD,sDAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAU,IAAD,EAC9B,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZC,IAAG,UAAEH,EAAKI,cAAP,aAAE,EAAaC,iBAAiBF,QARpB,kBAaZL,GAbY,4CAAH,sDCyBLQ,EAvBO,SAAChB,GAAc,IAAD,EACRd,mBAAS,CACjCqB,KAAM,GACNU,SAAS,IAHuB,mBAC3BC,EAD2B,KACpBC,EADoB,KAoBlC,OAdAC,qBAAU,WAAM,4CAEd,4BAAAnB,EAAA,sEAEoBF,EAAQC,GAF5B,OAEQqB,EAFR,OAGEF,EAAS,CACPZ,KAAMc,EACNJ,SAAS,IALb,4CAFc,0DAUdb,KAEC,CAACJ,IAEGkB,GCTMI,EAXK,SAACD,GAGjB,OACI,sBAAKE,UAAU,yCAAf,UACI,qBAAKC,IAAKH,EAAIA,IAAIR,IAAKY,IAAKJ,EAAIA,IAAIT,QACpC,4BAAIS,EAAIA,IAAIT,YCwBTc,EA7BC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EACEgB,EAAchB,GAAlCc,EADkB,EACxBP,KAAcU,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIM,UAAU,oCAAd,SAAmDvB,IACnD,sBAAKuB,UAAU,WAAf,UAEGN,GAAW,mBAAGM,UAAU,mCAAb,qBAFd,IAaGT,EAAOL,KAAI,SAACY,GAGX,OAAO,cAAC,EAAD,CAA0BA,IAAKA,GAAbA,EAAIV,cCSxBgB,EA/BM,WAAO,IAAD,EACWzC,mBAAS,CAC3C,gBAFuB,mBAClB0C,EADkB,KACN3C,EADM,KAczB,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG2C,EAAWnB,KAAI,SAACmB,EAAYC,GAG3B,OAAO,cAAC,EAAD,CAA0B7B,SAAU4B,GAAtBA,Y,MCvB/BE,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.3247dc27.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategoty = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\"); //  siempre debe de tener el valor inicial\n  const inputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    if (inputValue === \"\") {\n      return;\n    }\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cat) => {\n        // cat tiene el valor del estado anterior\n        // console.log({cat});\n        return [inputValue, ...cat];\n      });\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={submit}>\n      <input type=\"text\" value={inputValue} onChange={inputChange} />\n    </form>\n  );\n};\n\nAddCategoty.propTypes = {\n  setCategories: PropTypes.func.isRequired, // si no se coloca nada es opcional\n};\n\nexport default AddCategoty;\n","\nexport const gifGrid = async (category) => {\n    const URL =`http://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=XfyUkTFX5bCZgLqM7ft66n1uTsi3g3Xp`;\n    const resp = await fetch(URL);\n    const { data } = await resp.json();\n    const gifs = data.map((imgs) => {\n      return {\n        id: imgs.id,\n        title: imgs.title,\n        url: imgs.images?.downsized_medium.url,\n      };\n    });\n    // console.log(gifs);\n    // setimages(gifs);\n    return gifs;\n};","import { useEffect, useState } from \"react\";\nimport { gifGrid } from \"../helpers/getGifs\";\n\nconst useFetchGifts = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    //   esto se dispara una unica vez cuando el componente ya este renderizado por primera vez\n    async function fetch() {\n      //// debe ser sincrona, los efectos no pueden ser async\n      const img = await gifGrid(category);\n      setstate({\n        data: img,\n        loading: false,\n      });\n    }\n    fetch();\n    // si la category cambia vuelve a ejecutar este efecto []\n  }, [category]); // esto se dispara una unica vez cuando el componente ya este renderizado por primera vez\n\n  return state; // {data:[], loading:true}\n};\n\nexport default useFetchGifts;\n","import React from 'react'\n\n\nconst GifGridItem = (img) => {\n    // console.log(img.img.id);\n    // console.log({id, title,url});\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={img.img.url} alt={img.img.title} />\n            <p>{img.img.title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n\n// const GifGridItem = ({id, title,url}) => { // una manera con destructuracion\n// return (\n//     <div>\n//         <img src={url} alt={title} />\n//         <p>{title}</p>\n//     </div>\n//     // <div>\n//     // una manera\n//     //     {/* {img.title} */}\n//     //     <img src={url} alt={title} />\n//     //     <p>{title}</p>\n//     // </div>\n// )\n// }","import React from \"react\";\nimport useFetchGifts from \"../hooks/useFetchGifts\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifts(category);\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n      <div className=\"cardGrid\">\n        {/* {loading ? <p>Loading</p> : null} */}\n        {loading && <p className='animate__animated animate__flash'>Loading</p>} {/* si esto es true, si no no hagas nada */}\n        {/* <ol>\n        {images.map(({id, title}) => {\n          return <li key={id}>{title}</li>;\n        })}\n      </ol> */}\n        {/* {images.map((img) => {\n          una manera \n        //   return <GifGridItem key={img.id} img={img} />\n          return <GifGridItem key={img.id} {...img} />\n        })} */}\n        {images.map((img) => {\n          //   otra manera\n          //   return <GifGridItem key={img.id} img={img} />\n          return <GifGridItem key={img.id} img={img} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n\n/////////\n\n// import React, { useState, useEffect } from \"react\";\n// import { gifGrid } from \"../helpers/getGifs\";\n// import GifGridItem from \"./GifGridItem\";\n\n// const GifGrid = ({ category }) => {\n//   //   const [count, setCount] = useState(0);\n//   const [images, setimages] = useState([]);\n\n//   //   useEffect((funcion q quuiero ejecutar) => {\n//   //     gifGrid();\n//   //   }, arreglo de dependencias)\n//   //   useEffect( () => {\n//   //     //   esto se dispara una unica vez cuando el componente ya este renderizado por primera vez\n//   //     const img = gifGrid(category).then(img=> setimages(img));\n//   //     // si la category cambia vuelve a ejecutar este efecto []\n//   //   }, [category]); // esto se dispara una unica vez cuando el componente ya este renderizado por primera vez\n\n//   useEffect(() => {\n//     //   esto se dispara una unica vez cuando el componente ya este renderizado por primera vez\n//     async function fetch() {\n//       const img = await gifGrid(category);\n//       setimages(img);\n//     }\n//     fetch();\n//     // si la category cambia vuelve a ejecutar este efecto []\n//   }, [category]); // esto se dispara una unica vez cuando el componente ya este renderizado por primera vez\n\n//   return (\n//     <>\n//       <h3>{category}</h3>\n//       <div className=\"cardGrid\">\n//         {/* <ol>\n//         {images.map(({id, title}) => {\n//           return <li key={id}>{title}</li>;\n//         })}\n//       </ol> */}\n\n//         {/* {images.map((img) => {\n//           una manera\n//         //   return <GifGridItem key={img.id} img={img} />\n//           return <GifGridItem key={img.id} {...img} />\n//         })} */}\n\n//         {images.map((img) => {\n//           //   otra manera\n//           //   return <GifGridItem key={img.id} img={img} />\n//           return <GifGridItem key={img.id} img={img} />;\n//         })}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default GifGrid;\n","import React, { useState } from \"react\";\nimport AddCategoty from \"./AddCategoty\";\nimport GifGrid from \"./GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\n    \"Dragon Ball\",\n  ]);\n\n  //   const add = () => {\n  //     // agregar al estado asi se cambia el estado\n  //     //  setCategories([...categories, 'GT'])\n  //      setCategories((cat)=> {\n  //          console.log(cat);\n  //          return [...cat, 'GT']\n  //      })\n  //   };\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n      <AddCategoty setCategories={setCategories} />\n      <hr />\n      {/* <button onClick={add}>Agregar</button> */}\n      <ol>\n        {categories.map((categories, i) => {\n          // return <li key={categories}> {categories} </li>;\n          // return <li key={categories}> {categories} </li>;\n          return <GifGrid key={categories} category={categories} />\n        })}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./components/GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}